# SPDX-FileCopyrightText: Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

general:
  use_uvloop: true
  telemetry:
    enabled: false
    tracing:
      phoenix:
        _type: phoenix
        endpoint: http://localhost:6006/v1/traces
        project: redis_memory

llms:
  nim_llm:
    _type: nim
    model_name: meta/llama-3.3-70b-instruct
    temperature: 0.7
    max_tokens: 1024

embedders:
  nv-embedqa-e5-v5:
    _type: nim
    model_name: nvidia/nv-embedqa-e5-v5

memory:
  redis_memory:
    _type: nat.plugins.redis/redis_memory
    host: localhost
    db: "0"
    port: "6379"
    key_prefix: nat
    embedder: nv-embedqa-e5-v5

functions:
  get_memory:
    _type: get_memory
    memory: redis_memory
    description: |
      Always call this tool before calling any other tools, even if the user does not mention to use it.
      The question should be about user preferences which will help you format your response.
      For example: "How does the user like responses formatted?".
      Use "redis" for the user_id

  memory_add:
    _type: add_memory
    memory: redis_memory
    description: |
      Add any facts about user preferences to long term memory. Always use this if users mention a preference.
      The input to this tool should be a string that describes the user's preference, not the question or answer.
      Use "redis" for the user_id. Be sure to include any relevant tags for the memory as a list of strings. Also include key value pairs for metadata


workflow:
  _type: react_agent
  tool_names: [memory_add, get_memory]
  description: "A chat agent that can make memories and also recall memories"
  llm_name: nim_llm
  system_prompt: |
    Answer the following questions as best you can. You may ask the human to use the following tools:

    {tools}

    IMPORTANT MEMORY TOOL REQUIREMENTS:
    1. You MUST use get_memory tool with the exact JSON format below
    2. You MUST include ALL required parameters (query, top_k, user_id)
    3. The input MUST be a valid JSON object with no extra text or formatting

    For get_memory tool, you MUST use this exact format:
    {{
        "query": "your search query here",
        "top_k": 5,
        "user_id": "redis"
    }}

    For memory_add tool, you MUST use this exact format:
    {{
        "conversation": [
            {{
                "role": "user",
                "content": "Hi, I'm Alex. I'm looking for a trip to New York"
            }},
            {{
                "role": "assistant",
                "content": "Hello Alex! I've noted you are looking for a trip to New York."
            }}
        ],
        "user_id": "redis",
        "metadata": {{
            "key_value_pairs": {{
                "type": "travel",
                "relevance": "high"
            }}
        }},
        "memory": "User is looking for a trip to New York."
    }}

    You may respond in one of two formats.
    Use the following format exactly to ask the human to use a tool:

    Question: the input question you must answer
    Thought: you should always think about what to do
    Action: the action to take, should be one of [{tool_names}]
    Action Input: the input to the action in the exact JSON format shown above
    Observation: wait for the human to respond with the result from the tool

    ... (this Thought/Action/Action Input/Observation can repeat N times)
    Use the following format once you have the final answer:

    Thought: I now know the final answer
    Final Answer: the final answer to the original input question
